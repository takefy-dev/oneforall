export declare const LogType: {
    error: string;
    warn: string;
    info: string;
    event: string;
    log: string;
    test: string;
    comment: string;
};
export declare const colors: {
    red: string;
    orange: string;
    gold: string;
    yellow: string;
    green: string;
    teal: string;
    blue: string;
    indigo: string;
    violet: string;
    magenta: string;
    pink: string;
    brown: string;
    black: string;
    grey: string;
    white: string;
    default: string;
};
export declare type ColorResolvable = NonNullable<keyof typeof colors | keyof typeof LogType | string>;
export declare class Logger {
    /**
     * @remarks
     * Avoid using it because you can't do anything with it.
     */
    private constructor();
    /**
     * If this property is set to `true` the {@link Logger.comment} method won't send logs.
     */
    static logComments: boolean;
    /**
     * Log a message in the console as a comment.
     *
     * @remarks
     * Using the grey color.
     *
     * @param message - The message to log, can be anything.
     * @param title - The title of the log.
     */
    static comment(message: any, title?: string): void;
    /**
     * Log a message in the console as an error.
     *
     * @remarks
     * Using the red color.
     *
     * @param message - The message to log, can be anything.
     * @param title - The title of the log.
     */
    static error(message: any, title?: string): void;
    /**
     * Log a message in the console as an event.
     *
     * @remarks
     * Using the green color.
     *
     * @param message - The message to log, can be anything.
     * @param title - The title of the log.
     */
    static event(message: any, title?: string): void;
    /**
     * Log a message in the console as an info.
     *
     * @remarks
     * Using the blue color.
     *
     * @param message - The message to log, can be anything.
     * @param title - The title of the log.
     */
    static info(message: any, title?: string): void;
    /**
     * Log a message in the console.
     *
     * @remarks
     * Using the # color.
     *
     * @param message - The message to log, can be anything.
     * @param title - The title of the log.
     * @param color - The color of the log.
     */
    static log(message: any, title?: string, color?: ColorResolvable): void;
    static setColor(color?: ColorResolvable, text?: string): string;
    /**
     * Log a message in the console as a test.
     *
     * @remarks
     * Using the default color.
     *
     * @param message - The message to log, can be anything.
     * @param title - The title of the log.
     */
    static test(message: any, title?: string): void;
    /**
     * Log a message in the console as a warn.
     *
     * @remarks
     * Using the yellow color.
     *
     * @param message - The message to log, can be anything.
     * @param title - The title of the log.
     */
    static warn(message: any, title?: string): void;
    /**
     * Log something in the console and transform the ColorResolvable into a ASCII Escape Sequence containing the color.
     *
     * @param text - The text to log.
     * @param color - The color of the text.
     * @param title - The title of the text.
     * @internal
     */
    protected static process(text: any, color?: ColorResolvable, title?: string): void;
    /**
     * Returns a color in hexadecimal without the sharp from a ColorResolvable.
     *
     * @remarks
     * Returns the default color if it cannot be resolved.
     *
     * @param color - The ColorResolvable.
     * @returns The color.
     * @internal
     */
    private static getColorFromColorResolvable;
    /**
     * Get the value of an enum.
     *
     * @typeParam V - An object.
     * @param enumObject - The enum as an object.
     * @param property - The property to get.
     * @returns The value from the key of the enum or undefined if not found.
     * @internal
     */
    private static propertyInEnum;
}
