/// <reference types="node" />
import { ClientOptions, Collection, Message, Snowflake } from 'discord.js';
import { EventEmitter } from 'events';
import { AdvancedClient } from './classes/AdvancedClient';
import { Command } from './classes/Command';
import { CommandHandlerError } from './classes/CommandHandlerError';
import { Event } from './classes/Event';
export declare namespace CommandHandler {
    interface CreateCommandHandlerOptions {
        /**
         * The directory of your commands.
         */
        commandsDir: string;
        /**
         * The directory of your events.
         */
        eventsDir: string;
        /**
         * The owners IDs from discord of the bot.
         */
        owners?: string[];
        /**
         * The prefixes for the CommandHandler.
         *
         * @remarks
         * There are two default prefixes that are `<@!botID>` & `<@botID>`, they're the text versions of mentions in Discord.
         * There are two ones because the `!` is only here in DM to indicate that that's a user mention and not a member mention.
         */
        prefixes?: string[];
    }
    /**
     * @internal
     */
    interface CommandCooldown {
        executedAt: Date;
        cooldown: number;
    }
    /**
     * @internal
     */
    type CooldownUser = {
        [k: string]: CommandCooldown;
    };
    /**
     * Options for launching the CommandHandler.
     */
    interface LaunchCommandHandlerOptions {
        /**
         * The token of your bot.
         */
        token: string;
        /**
         * The client options, see {@link https://discord.js.org/#/docs/main/stable/typedef/ClientOptions | ClientOptions}.
         */
        clientOptions?: ClientOptions;
    }
    /**
     * The CommandHandler events.
     *
     * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter | EventEmitter}.
     */
    type CommandHandlerEvents = {
        /**
         * The event executed when creating the CommandHandler.
         */
        create: [CreateCommandHandlerOptions];
        /**
         * The event executed when a CommandHandlerError is created.
         */
        error: [CommandHandlerError];
        /**
         * The event executed when the CommandHandler starts its launch.
         */
        launch: [];
        /**
         * The event executed when loading a Command.
         */
        loadCommand: [Command];
        /**
         * The event executed when loading an Event.
         */
        loadEvent: [Event];
        /**
         * The event executed when the CommandHandler has finished launching..
         */
        launched: [];
    };
    /**
     * The version of the handler.
     */
    const version: string;
    /**
     * The event emitter for the CommandHandler.
     *
     * @eventProperty
     */
    const emitter: EventEmitter;
    /**
     * The commands registered by the CommandHandler.
     */
    const commands: Collection<string, Command>;
    /**
     * The cooldowns mapped by ID and cooldown user.
     *
     * **A simple explication** :<br>
     * When a user executes a command with a cooldown, a new value is added.
     * ```ts
     * [ID]: {
     *    [commandName]: {
     *        executedAt: Date,
     *        cooldown: [command cooldown]
     *    }
     * }
     * ```
     */
    const cooldowns: Collection<Snowflake, CooldownUser>;
    /**
     * The events registered by the CommandHandler.
     *
     * @remarks
     * These events may not be bound to the {@link client}.
     */
    const events: Collection<string, Event>;
    let commandsDir: string;
    let eventsDir: string;
    let owners: string[];
    let prefixes: string[];
    /**
     * The client of the handler, null before {@link launch} function executed.
     */
    let client: AdvancedClient | null;
    /**
     * @typeParam K - Events names for CommandHandler.
     * @param eventName - The event name.
     * @param fn - The callback to execute.
     */
    function on<K extends keyof CommandHandlerEvents>(eventName: K, fn: (listener: CommandHandlerEvents[K]) => void): void;
    /**
     * @param eventName - The event name.
     * @param args - The arguments to pass.
     */
    function emit<K extends keyof CommandHandlerEvents>(eventName: K, ...args: CommandHandlerEvents[K]): void;
    /**
     * Add the defaults events to your CommandHandler.
     *
     * @remarks
     * Must use after {@link CommandHandler.create}.
     *
     * @returns It returns itself so that afterward you can use the other functions.
     */
    function setDefaultEvents(): typeof CommandHandler;
    /**
     * Add the defaults commands to your CommandHandler.
     *
     * @remarks
     * Must use after {@link CommandHandler.create}.
     *
     * @returns It returns itself so that afterward you can use the other functions .
     */
    function setDefaultCommands(): typeof CommandHandler;
    /**
     * Creates a new CommandHandler, wrap up the last one.
     *
     * @param options - Options for creating a new CommandHandler.
     * @returns It returns itself so that afterward you can use the other functions.
     */
    function create(options: CreateCommandHandlerOptions): typeof CommandHandler;
    /**
     * Launches the CommandHandler, log in the client and load commands/events.
     *
     * @param options - Options for launching the CommandHandler, see {@link CreateCommandHandlerOptions}.
     * @returns Itself in a promise.
     */
    function launch(options: LaunchCommandHandlerOptions): Promise<typeof CommandHandler>;
    /**
     * Get the prefix from the prefixes defined in {@link CommandHandler.launch} or null.
     *
     * @param message - The message to get the prefix for.
     * @returns The prefix found or null if not.
     */
    function getPrefixFromMessage(message: Message): string | null;
    /**
     * Load a command from the directory & filename.
     *
     * @param path - The directory to get the command from.
     * @param name - The filename of the command.
     */
    function loadCommand(path: string, name: string): Promise<void>;
    /**
     * Load all the commands from a directory.
     *
     * @remarks
     * The path must be a directory containing sub-directories.
     *
     * @param path - The path of the directory to load the commands from.
     */
    function loadCommands(path: string): Promise<void>;
    /**
     * Load all the events from a directory.
     *
     * @param path - The path of the directory to load the events from.
     */
    function loadEvents(path: string): Promise<void>;
}
