import { GuildMember, Message, PermissionString, Snowflake, TextChannel, User } from 'discord.js';
import { CommandHandler } from '../CommandHandler';
import { DefaultCommandRunFunction, RunFunction } from '../types';
import CommandCooldown = CommandHandler.CommandCooldown;
/**
 * # How tags should works ?
 *
 * When using commands, you want certain commands to only run on a server or in DM etc.<br>
 * Most of other CommandHandlers uses boolean properties like `guildOnly`.<br>
 * To avoid having a ton of these, I imagined a system where you have command tags and for every calls, tags for the command are verified one by one.<br>
 * And this system works very smoothly !<br>
 * So if you're using the default message event
 * ({@link https://github.com/Ayfri/Advanced-Command-Handler/wiki/Defaults#defaults-events | see how to use defaults events }), tags will be checked.
 *
 * @example
 * ```ts
 * if (command.tags.includes(Tag.guildOnly) && !message.guild) {
 *     message.channel.send(`You must be on a guild to execute the ${command.name} command !`);
 * }
 * ```
 */
export declare enum Tag {
    /**
     * Tag for commands to only run on a guild.
     */
    guildOnly = "guildOnly",
    /**
     * Tag for commands to only run if author is an owner defined in {@link CommandHandler.owners}.
     */
    ownerOnly = "ownerOnly",
    /**
     * Tag for commands to only run on a guild and in an NSFW channel.
     */
    nsfw = "nsfw",
    /**
     * Tag for commands to only run on a guild and if the author is the owner of the guild.
     */
    guildOwnerOnly = "guildOwnerOnly",
    /**
     * Tag for commands to only run in DM.
     */
    dmOnly = "dmOnly"
}
export interface Cooldown extends CommandCooldown {
    /**
     * The time to wait, in seconds & milliseconds.
     */
    waitMore: number;
}
export interface CommandOptions {
    /**
     * The name of the command.
     */
    readonly name: string;
    /**
     * The aliases of the command.
     */
    aliases?: string[];
    /**
     * The category of the command.
     */
    category?: string;
    /**
     * The channels where the command should only be executed if used (if using the default message event).
     */
    channels?: Array<Snowflake | TextChannel>;
    /**
     * The client permissions needed to run the command (if using the default message event).
     */
    clientPermissions?: PermissionString[];
    /**
     * The cooldown of the command.
     *
     * @defaultValue 0
     *
     * @remarks
     * Every cooldown should be saved in {@link CommandHandler.cooldowns}.
     */
    cooldown?: number;
    /**
     * The description of the command.
     */
    description?: string;
    /**
     * The tags of the command.
     *
     * @remarks
     * How tags works ?
     * @see {@link Tag}
     */
    tags?: Array<Tag | keyof typeof Tag>;
    /**
     * The usage of the command.
     *
     * @example
     * ```
     * userinfo
     * userinfo me
     * userinfo <ID/Username/Mention of User>
     * ```
     */
    usage?: string;
    /**
     * The user permissions needed to run the command (if using the default message event).
     */
    userPermissions?: PermissionString[];
}
/**
 * Options for the Command#deleteMessage method.
 */
export interface DeleteMessageOptions {
    /**
     * The message to delete.
     */
    message: Message;
    /**
     * The options from {@link https://discord.js.org/#/docs/main/stable/class/Message?scrollTo=delete | Message#delete}.
     */
    options?: {
        /**
         * How long to wait to delete the message in milliseconds.
         */
        timeout?: number;
        /**
         * Reason for deleting this message, if it does not belong to the client user.
         */
        reason?: string;
    };
}
export interface MissingPermissions {
    client: PermissionString[];
    user: PermissionString[];
}
export declare class Command implements CommandOptions {
    /**
     * The name of the command.
     */
    readonly name: string;
    /**
     * The aliases of the command.
     */
    aliases: string[];
    /**
     * The category of the command.
     *
     * @defaultValue The command parent directory.
     */
    category: string;
    /**
     * The channels where the command should only be executed if used (if using the default message event).
     */
    channels: Array<Snowflake | TextChannel>;
    /**
     * The client permissions needed to run the command (if using the default message event).
     *
     * @defaultValue `['SEND_MESSAGES']`
     */
    clientPermissions: PermissionString[];
    /**
     * The cooldown of the command.
     *
     * @defaultValue 0
     *
     * @remarks
     * Every cooldown should be saved in {@link CommandHandler.cooldowns}.
     */
    cooldown: number;
    /**
     * The description of the command.
     */
    description: string;
    /**
     * The tags of the command.
     *
     * @remarks
     * How tags works ?
     * @see {@link Tag}
     */
    tags: Array<Tag | keyof typeof Tag>;
    /**
     * The usage of the command.
     *
     * @example
     * ```
     * userinfo
     * userinfo me
     * userinfo <ID/Username/Mention of User>
     * ```
     */
    usage: string;
    /**
     * The user permissions needed to run the command (if using the default message event).
     *
     * @defaultValue `['SEND_MESSAGES']`
     */
    userPermissions: PermissionString[];
    /**
     * The function to run when executing the command.
     */
    run: RunFunction | DefaultCommandRunFunction;
    /**
     * @param options - The options for the command.
     * @param runFunction - The function to run when executing the command.
     */
    constructor(options: CommandOptions, runFunction: RunFunction | DefaultCommandRunFunction);
    /**
     * Get an user ID from different sources, only here to simplify code.
     *
     * @param from - Where to get ID from.
     * @returns The ID.
     * @internal
     */
    private static getSnowflake;
    /**
     * Deletes a message if deletable.
     *
     * @param options - The options, see {@link DeleteMessageOptions}.
     * @returns The deleted message if deleted.
     */
    deleteMessage(options: DeleteMessageOptions): Promise<Message> | undefined;
    /**
     * Returns the missing permissions from the client & user for a message.
     *
     * @param message - The message to check permissions for.
     * @returns The missing permissions.
     */
    getMissingPermissions(message: Message): MissingPermissions;
    /**
     * Returns the invalid permissions (not presents in {@link https://discord.js.org/#/docs/main/stable/class/Permissions?scrollTo=s-FLAGS | Permissions.FLAGS}).
     *
     * @returns The invalid permissions put in {@link clientPermissions} & {@link userPermissions}.
     * @internal
     */
    getInvalidPermissions(): {
        user: PermissionString[];
        client: PermissionString[];
    };
    /**
     * Gives the {@link tags} of this command which are not validated by the message.<br>
     * i.e. If a command is executed on a guild and the command has the `dmOnly` Tag, it will be returned.
     *
     * @param message - The message to test tags from.
     * @returns Tags that are not validated by the message.
     */
    getMissingTags(message: Message): Tag[];
    /**
     * Returns false if {@link channels} are defined for this command but the message doesn't come from one of it.
     *
     * @param from - The message or channel to test where it comes from.
     * @returns If it is on a channel required if used.
     */
    isInRightChannel(from: Message | TextChannel): boolean;
    /**
     * Returns true if the user is in a cooldown for this command.
     *
     * @remarks
     * If {@link cooldown} not set, this will always return `false`.
     *
     * @param from - From where to test if user is in a cooldown, see types.
     * @returns Is user in a cooldown.
     */
    isInCooldown(from: Message | User | Snowflake | GuildMember): boolean;
    /**
     * Get the actual cooldown of the user for this command plus when command has been executed and how many seconds to wait.
     *
     * @param from - Where to get the cooldown from, see types.
     * @returns The user's cooldown.
     */
    getCooldown(from: Message | User | Snowflake | GuildMember): Cooldown;
    /**
     * Put all the required properties in {@link CommandHandler.cooldowns} plus the `setTimeout` to remove the user from the cooldowns.
     *
     * @param from - What to use to select the user to set the cooldown from.
     */
    setCooldown(from: Message | User | Snowflake | GuildMember): void;
}
