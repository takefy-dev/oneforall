import { RunFunction } from '../types';
import { AdvancedClient } from './AdvancedClient';
export interface EventsOptions {
    /**
     * The name of the event.
     */
    readonly name: string;
    /**
     * If the event should be fired only once.
     */
    once?: boolean;
}
export declare class Event implements EventsOptions {
    /**
     * The name of the event.
     */
    readonly name: string;
    /**
     * If the event should be fired only once.
     */
    once: boolean;
    /**
     * The run function, executed when the event is fired.
     */
    run: RunFunction;
    /**
     * @param options - Options for the event.
     * @param runFunction - The run function, executed when the event is fired.
     * {@link "@discord.js".GuildMember}
     */
    constructor(options: EventsOptions, runFunction: RunFunction);
    /**
     * Bind the event to the client, when the `something` event from {@link AdvancedClient} will be fire, this event will be also fired.
     *
     * @param client - The client to bind the event from.
     */
    bind(client: AdvancedClient): void;
    /**
     * Unbinds the event to the client.
     *
     * @param client - The client to unbind the event from.
     */
    unbind(client: AdvancedClient): void;
}
