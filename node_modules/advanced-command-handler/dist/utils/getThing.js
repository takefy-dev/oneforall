"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThing = exports.DataType = void 0;
const discord_js_1 = require("discord.js");
const CommandHandler_1 = require("../CommandHandler");
var DataType;
(function (DataType) {
    DataType["command"] = "command";
    DataType["channel"] = "channel";
    DataType["guild"] = "emote";
    DataType["member"] = "guild";
    DataType["user"] = "user";
    DataType["role"] = "role";
    DataType["emote"] = "emote";
    DataType["message"] = "message";
})(DataType = exports.DataType || (exports.DataType = {}));
/**
 * Finds the data from a string or a Message and returns null if nothing found.
 *
 * @param dataType - The data type {@link DataType}.
 * @param text - A string or a Message to find dataType from.
 * @returns The Data found or null if not found.
 */
async function getThing(dataType, text) {
    let message;
    if (text instanceof discord_js_1.Message) {
        message = text;
        text = text.content;
    }
    else
        message = null;
    const client = CommandHandler_1.CommandHandler.client;
    switch (dataType) {
        case DataType.command:
            return CommandHandler_1.CommandHandler.commands.find((c) => c.name === text || (c.aliases && c.aliases.includes(text))) || null;
        case DataType.channel:
            return (message?.guild?.channels.cache.get(text) ||
                message?.mentions.channels.first() ||
                message?.guild?.channels.cache.find((c) => c.name.toLowerCase().includes(text.toLowerCase()) && text.toString().length > 1) ||
                null);
        case DataType.guild:
            return client?.guilds.cache.get(text) || client?.guilds.cache.find((g) => g.name.toLowerCase().includes(text.toLowerCase()) && text.length > 1) || null;
        case DataType.member:
            return (message?.guild?.members.cache.get(text) ||
                message?.mentions?.members?.first() ||
                message?.guild?.members.cache.find((m) => (m.displayName.toLowerCase().includes(text.toLowerCase()) || m.user.username.toLowerCase().includes(text.toLowerCase())) && text.length > 1) ||
                null);
        case DataType.user:
            return client?.users.cache.get(text) || client?.users.cache.find((u) => u.username.toLowerCase() === text.toLowerCase()) || message?.mentions?.users.first() || null;
        case DataType.role:
            return (message?.guild?.roles.cache.get(text) ||
                message?.mentions.roles.first() ||
                message?.guild?.roles.cache.find((r) => r.name.toLowerCase().includes(text.toLowerCase()) && text.length > 1) ||
                null);
        case DataType.emote:
            return client?.emojis.cache.get(text) || client?.emojis.cache.find((e) => e.name.toLowerCase().includes(text.toLowerCase()) && text.length > 1) || null;
        case DataType.message:
            const m = await message?.channel.messages.fetch(text);
            if (m)
                return m;
            const url = text.replace('https://discord.com/channels/', '').split('/');
            const channels = client?.channels.cache;
            if (text.startsWith('https') && channels?.has(url[1])) {
                return (await channels?.filter(c => c.isText()).get(url[1])?.messages.fetch(url[2])) || null;
            }
            if (channels) {
                for (const channel of channels) {
                    const m = await channel[1].messages.fetch(text);
                    if (m)
                        return m;
                }
            }
            return null;
    }
    return null;
}
exports.getThing = getThing;
