"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.colors = exports.LogType = void 0;
const chalk_1 = __importDefault(require("chalk"));
const dayjs_1 = __importDefault(require("dayjs"));
const util_1 = require("util");
exports.LogType = {
    error: 'red',
    warn: 'yellow',
    info: 'blue',
    event: 'green',
    log: '#43804e',
    test: 'default',
    comment: 'gray',
};
exports.colors = {
    red: '#b52825',
    orange: '#e76a1f',
    gold: '#deae17',
    yellow: '#eeee23',
    green: '#3ecc2d',
    teal: '#11cc93',
    blue: '#2582ff',
    indigo: '#524cd9',
    violet: '#7d31cc',
    magenta: '#b154cf',
    pink: '#d070a0',
    brown: '#502f1e',
    black: '#000000',
    grey: '#6e6f77',
    white: '#ffffff',
    default: '#cccccc',
};
class Logger {
    static comment(message, title = 'comment') {
        if (Logger.logComments)
            Logger.process(message, exports.LogType.comment, title);
    }
    static error(message, title = 'error') {
        Logger.process(message, exports.LogType.error, title);
    }
    static event(message, title = 'event') {
        Logger.process(message, exports.LogType.event, title);
    }
    static info(message, title = 'info') {
        Logger.process(message, exports.LogType.info, title);
    }
    static log(message, title = 'log', color = exports.LogType.log) {
        Logger.process(message, color, title);
    }
    static setColor(color = exports.colors.default, text = '') {
        let finalColor;
        if ((color = this.getColorFromColorResolvable(color)))
            finalColor = chalk_1.default.hex(color);
        else
            throw new Error('Waiting for a log type, color or HexColor but receive something else.');
        return text ? finalColor(text) : finalColor();
    }
    static test(message, title = 'test') {
        Logger.process(message, exports.LogType.test, title);
    }
    static warn(message, title = 'warn') {
        Logger.process(message, exports.LogType.warn, title);
    }
    static process(text, color = 'test', title = '') {
        text = typeof text === 'string' ? text : util_1.inspect(text);
        text = text.replace(/(?<![;\d])\d+(\.\d+)?(?!;|\d)/g, (match) => chalk_1.default.yellow(match));
        text = text.replace(/\u001b\[\u001b\[33m39\u001b\[39mm/gi, chalk_1.default.reset());
        color = Logger.propertyInEnum(exports.LogType, color) ?? color;
        text = `${Logger.setColor('#847270', `[${dayjs_1.default().format('D HH:mm:ss.SSS')}]`)}${Logger.setColor(color, `[${title.toUpperCase()}] ${text + chalk_1.default.reset()}`)}`;
        console.log(text);
    }
    static getColorFromColorResolvable(colorAfter) {
        return (Logger.propertyInEnum(exports.LogType, Logger.propertyInEnum(exports.colors, colorAfter) ?? '') ??
            Logger.propertyInEnum(exports.colors, colorAfter) ??
            Logger.propertyInEnum(exports.LogType, colorAfter)?.match(/#[0-9|a-f]{6}/i)?.[0] ??
            colorAfter.match(/#[0-9|a-f]{6}/i)?.[0] ??
            exports.colors.default);
    }
    static propertyInEnum(enumObject, property) {
        return property in enumObject ? enumObject[property] : undefined;
    }
}
exports.Logger = Logger;
Logger.logComments = true;
