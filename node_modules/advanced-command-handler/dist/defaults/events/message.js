"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Command_1 = require("../../classes/Command");
const CommandHandler_1 = __importDefault(require("../../classes/CommandHandler"));
const Event_1 = __importDefault(require("../../classes/Event"));
const argError_1 = __importDefault(require("../../utils/argError"));
const getThing_1 = require("../../utils/getThing");
const Logger_1 = require("../../utils/Logger");
const permissionsError_1 = __importDefault(require("../../utils/permissionsError"));
exports.default = new Event_1.default({
    name: 'message',
}, async (handler, message) => {
    if (message.author.bot || message.system)
        return;
    const prefix = CommandHandler_1.default.getPrefixFromMessage(message);
    if (!prefix)
        return;
    const args = message.content.slice(prefix.length).trim().split(/ +/g);
    const cmd = await getThing_1.getThing('command', args[0].toLowerCase().normalize());
    args.shift();
    if (cmd && cmd.isInRightChannel(message)) {
        const missingPermissions = cmd.getMissingPermissions(message);
        const missingTags = cmd.getMissingTags(message);
        if (missingPermissions.client.length)
            return permissionsError_1.default(message, missingPermissions.client, cmd, true);
        if (missingPermissions.user.length)
            return permissionsError_1.default(message, missingPermissions.user, cmd);
        if (missingTags.length)
            return argError_1.default(message, `There are missing tags for the message: \n\`${missingTags
                .map(tag => Command_1.Tag[tag])
                .sort()
                .join('\n')
                .toUpperCase()}\``, cmd);
        try {
            await cmd.run(handler, message, args);
            Logger_1.Logger.log(`${message.author.tag} has executed the command ${Logger_1.Logger.setColor('red', cmd.name)}.`);
        }
        catch (error) {
            Logger_1.Logger.warn(error.stack);
        }
    }
});
