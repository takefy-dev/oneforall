"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Command_1 = require("../../classes/Command");
const CommandHandler_1 = require("../../CommandHandler");
const Event_1 = require("../../classes/Event");
const argError_1 = require("../../utils/argError");
const codeError_1 = require("../../utils/codeError");
const getThing_1 = require("../../utils/getThing");
const Logger_1 = require("../../utils/Logger");
const permissionsError_1 = require("../../utils/permissionsError");
exports.default = new Event_1.Event({
    name: 'message',
}, async (handler, message) => {
    if (message.author.bot || message.system)
        return;
    const prefix = CommandHandler_1.CommandHandler.getPrefixFromMessage(message);
    if (!prefix)
        return;
    const [commandArg, ...args] = message.content.slice(prefix.length).trim().split(/ +/g);
    const command = await getThing_1.getThing('command', commandArg.toLowerCase().normalize());
    if (command) {
        if (command.isInCooldown(message))
            return message.channel.send(`You are on a cooldown! Please wait **${command.getCooldown(message).waitMore / 1000}**s.`);
        if (!command.isInRightChannel(message))
            return message.channel.send(`This command is not in the correct channel.`);
        const missingPermissions = command.getMissingPermissions(message);
        const missingTags = command.getMissingTags(message);
        if (missingPermissions.client.length)
            return permissionsError_1.permissionsError(message, missingPermissions.client, command, true);
        if (missingPermissions.user.length)
            return permissionsError_1.permissionsError(message, missingPermissions.user, command);
        if (missingTags.length)
            return argError_1.argError(message, `There are missing tags for the message: \n\`${missingTags
                .map(tag => Command_1.Tag[tag])
                .sort()
                .join('\n')
                .toUpperCase()}\``, command);
        try {
            await command.run(handler, message, args);
            command.setCooldown(message);
            Logger_1.Logger.log(`${message.author.tag} has executed the command ${Logger_1.Logger.setColor('red', command.name)}.`);
        }
        catch (error) {
            await codeError_1.codeError(message, error, command);
        }
    }
});
