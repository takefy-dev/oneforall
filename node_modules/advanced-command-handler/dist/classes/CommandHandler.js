"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const events_1 = require("events");
const fs_1 = require("fs");
const path_1 = require("path");
const defaultCommands = __importStar(require("../defaults/commands"));
const defaultEvents = __importStar(require("../defaults/events"));
const Logger_1 = require("../utils/Logger");
const AdvancedClient_1 = __importDefault(require("./AdvancedClient"));
const CommandHandlerError_1 = __importDefault(require("./CommandHandlerError"));
var CommandHandler;
(function (CommandHandler) {
    CommandHandler.version = require('../../package.json').version;
    CommandHandler.emitter = new events_1.EventEmitter();
    CommandHandler.commands = new discord_js_1.Collection();
    CommandHandler.cooldowns = new discord_js_1.Collection();
    CommandHandler.events = new discord_js_1.Collection();
    CommandHandler.commandsDir = '';
    CommandHandler.eventsDir = '';
    CommandHandler.owners = [];
    CommandHandler.prefixes = [];
    CommandHandler.client = null;
    function on(eventName, fn) {
        CommandHandler.emitter.on(eventName, fn);
    }
    CommandHandler.on = on;
    function emit(eventName, ...args) {
        CommandHandler.emitter.emit(eventName, args);
    }
    CommandHandler.emit = emit;
    function setDefaultEvents() {
        Logger_1.Logger.info('Loading default events.', 'Loading');
        for (let event of Object.values(defaultEvents)) {
            CommandHandler.events.set(event.default.name, event.default);
            Logger_1.Logger.comment(`Default ${Logger_1.Logger.setColor('green', event.default.name) + Logger_1.Logger.setColor('comment', ' event loaded.')}`, 'Loading');
        }
        Logger_1.Logger.info(`Default events loaded. (${Object.values(defaultEvents).length})`, 'Loading');
        return CommandHandler;
    }
    CommandHandler.setDefaultEvents = setDefaultEvents;
    function setDefaultCommands() {
        Logger_1.Logger.info('Loading default commands.', 'Loading');
        for (let command of Object.values(defaultCommands)) {
            CommandHandler.commands.set(command.default.name, command.default);
            Logger_1.Logger.comment(`Default ${Logger_1.Logger.setColor('green', command.default.name) + Logger_1.Logger.setColor('comment', ' command loaded.')}`, 'Loading');
        }
        Logger_1.Logger.info(`Default commands loaded. (${Object.keys(defaultCommands)})`, 'Loading');
        return CommandHandler;
    }
    CommandHandler.setDefaultCommands = setDefaultCommands;
    function create(options) {
        Logger_1.Logger.log(`Advanced Command Handler ${CommandHandler.version} by Ayfri.`, 'Loading', 'red');
        CommandHandler.commandsDir = options.commandsDir;
        CommandHandler.eventsDir = options.eventsDir;
        CommandHandler.owners = options.owners ?? [];
        CommandHandler.prefixes = options.prefixes ?? [];
        process.on('warning', error => Logger_1.Logger.error(`An error occurred. \n${error.stack}`));
        process.on('uncaughtException', error => Logger_1.Logger.error(`An error occurred. \n${error.stack}`));
        emit('create', options);
        return CommandHandler;
    }
    CommandHandler.create = create;
    async function launch(options) {
        CommandHandler.client = new AdvancedClient_1.default(options.token, options.clientOptions ?? {});
        emit('launch');
        try {
            await loadCommands(CommandHandler.commandsDir ?? '');
            await loadEvents(CommandHandler.eventsDir ?? '');
            Logger_1.Logger.comment('Binding events to client.', 'Binding');
            CommandHandler.events.forEach(event => {
                event.bind(CommandHandler.client);
            });
            Logger_1.Logger.info(`${CommandHandler.client?.eventNames().length ?? 0} events loaded & bind.`, 'Loading');
        }
        catch (e) {
            Logger_1.Logger.error(e.stack, 'Loading');
        }
        await CommandHandler.client.login(options.token);
        CommandHandler.prefixes.push(`<@${CommandHandler.client?.user?.id}> `);
        CommandHandler.prefixes.push(`<@!${CommandHandler.client?.user?.id}> `);
        CommandHandler.owners.push((await CommandHandler.client.fetchApplication()).owner?.id ?? '');
        emit('launched');
        return CommandHandler;
    }
    CommandHandler.launch = launch;
    function getPrefixFromMessage(message) {
        return CommandHandler.prefixes.find(prefix => message.content.startsWith(prefix)) ?? null;
    }
    CommandHandler.getPrefixFromMessage = getPrefixFromMessage;
    async function loadCommand(path, name) {
        let command = await Promise.resolve().then(() => __importStar(require(path_1.join(process.cwd(), `./${path}/${name}`))));
        if ('default' in command)
            command = command.default;
        if (!command)
            throw new Error(`Command given name or path is not valid.\nPath : ${path}\nName:${name}`);
        if (command.category === 'None')
            command.category = path.split(/[\\/]/).pop();
        const invalidPermissions = command.getInvalidPermissions();
        if (invalidPermissions.client.length > 0)
            throw new CommandHandlerError_1.default(`Invalid client permissions for '${command.name}' command.\nInvalid Permissions: '${invalidPermissions.client.sort().join(',')}'`, 'Loading');
        if (invalidPermissions.user.length > 0)
            throw new CommandHandlerError_1.default(`Invalid user permissions for '${command.name}' command.\nInvalid Permissions: '${invalidPermissions.user.sort().join(',')}'`, 'Loading');
        CommandHandler.commands.set(command.name, command);
        emit('loadCommand', command);
        Logger_1.Logger.comment(`Loading the command : ${Logger_1.Logger.setColor('gold', name)}`, 'Loading');
    }
    CommandHandler.loadCommand = loadCommand;
    async function loadCommands(path) {
        if (!path)
            return;
        const dirs = await fs_1.promises.readdir(path);
        Logger_1.Logger.info('Loading commands.', 'Loading');
        Logger_1.Logger.comment(`Categories : (${dirs.length})`, 'Loading');
        if (dirs) {
            for (const dir of dirs) {
                const files = await fs_1.promises.readdir(path_1.join(process.cwd(), `${path}/${dir}`));
                if (files.length === 0)
                    continue;
                Logger_1.Logger.comment(`Commands in the category '${dir}' : (${files.length})`, 'Loading');
                for (const file of files) {
                    await loadCommand(`${path}/${dir}`, file);
                }
            }
        }
        Logger_1.Logger.info(`${CommandHandler.commands.size} commands loaded.`, 'Loading');
    }
    CommandHandler.loadCommands = loadCommands;
    async function loadEvents(path) {
        if (!path)
            return;
        const files = await fs_1.promises.readdir(path);
        Logger_1.Logger.info('Loading events.', 'Loading');
        Logger_1.Logger.comment(`Events : (${files.length})`, 'Loading');
        if (files) {
            for (const file of files) {
                let event = await Promise.resolve().then(() => __importStar(require(path_1.join(process.cwd(), `${path}/${file}`))));
                if ('default' in event)
                    event = event.default;
                if (!event)
                    throw new Error(`Command given name or path is not valid.\nPath : ${path}\nName:${file}`);
                CommandHandler.events.set(event.name, event);
                Logger_1.Logger.comment(`Event ${event.name} loading : ${Logger_1.Logger.setColor('gold', `${file.split('.')[0]}.js`)}`, 'Loading');
            }
        }
    }
    CommandHandler.loadEvents = loadEvents;
    function loadEvent(event) {
        if ('default' in event)
            event = event.default;
        if (event.once)
            CommandHandler.client?.once(event.name, event.run.bind(null, CommandHandler));
        else
            CommandHandler.client?.on(event.name, event.run.bind(null, CommandHandler));
        emit('loadEvent', event);
        return event;
    }
    CommandHandler.loadEvent = loadEvent;
})(CommandHandler || (CommandHandler = {}));
exports.default = CommandHandler;
