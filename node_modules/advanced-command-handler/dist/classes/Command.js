"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = exports.Tag = void 0;
const discord_js_1 = require("discord.js");
const CommandHandler_1 = __importDefault(require("./CommandHandler"));
var Tag;
(function (Tag) {
    Tag[Tag["guildOnly"] = 0] = "guildOnly";
    Tag[Tag["ownerOnly"] = 1] = "ownerOnly";
    Tag[Tag["nsfw"] = 2] = "nsfw";
    Tag[Tag["guildOwnerOnly"] = 3] = "guildOwnerOnly";
    Tag[Tag["dmOnly"] = 4] = "dmOnly";
})(Tag = exports.Tag || (exports.Tag = {}));
class Command {
    constructor(options, runFunction) {
        this.name = options.name;
        this.run = runFunction;
        this.description = options.description ?? '';
        this.usage = options.usage ?? '';
        this.category = options.category ?? 'None';
        this.aliases = options.aliases ?? [];
        this.clientPermissions = options.clientPermissions ?? ['SEND_MESSAGES'];
        this.userPermissions = options.userPermissions ?? ['SEND_MESSAGES'];
        this.channels = options.channels ?? [];
        this.tags = options.tags ?? [];
        this.cooldown = options.cooldown ?? 0;
    }
    deleteMessage({ message, options }) {
        if (message.deletable)
            return message.delete(options);
    }
    getMissingPermissions(message) {
        const missingPermissions = {
            client: [],
            user: [],
        };
        if (!message.guild || !message.guild?.available)
            return missingPermissions;
        missingPermissions.client.push(...this.clientPermissions.filter(permission => {
            if (!(message.channel instanceof discord_js_1.DMChannel))
                return !message.channel.permissionsFor(message.guild?.me)?.has(permission, false);
        }));
        missingPermissions.user.push(...this.userPermissions.filter(permission => {
            if (!(message.channel instanceof discord_js_1.DMChannel))
                return !message.channel.permissionsFor(message.member)?.has(permission, false);
        }));
        if (message.guild.me?.hasPermission('ADMINISTRATOR'))
            missingPermissions.client = [];
        if (message.member?.hasPermission('ADMINISTRATOR'))
            missingPermissions.user = [];
        return missingPermissions;
    }
    getInvalidPermissions() {
        const permissionsFlags = [...Object.keys(discord_js_1.Permissions.FLAGS)];
        return {
            user: this.userPermissions.filter(permission => !permissionsFlags.includes(permission)),
            client: this.clientPermissions.filter(permission => !permissionsFlags.includes(permission)),
        };
    }
    getMissingTags(message) {
        const missingTags = [];
        for (const tag of this.tags) {
            if (tag === Tag.ownerOnly && !CommandHandler_1.default.owners?.includes(message.author.id))
                missingTags.push(Tag.ownerOnly);
            if (tag === Tag.nsfw && message.channel instanceof discord_js_1.GuildChannel && !message.channel.nsfw)
                missingTags.push(Tag.nsfw);
            if (tag === Tag.guildOnly && message.guild === null)
                missingTags.push(Tag.guildOnly);
            if (tag === Tag.guildOwnerOnly && message.guild?.ownerID !== message.author.id)
                missingTags.push(Tag.guildOwnerOnly);
            if (tag === Tag.dmOnly && message.channel.type !== 'dm')
                missingTags.push(Tag.dmOnly);
        }
        return missingTags;
    }
    isInRightChannel(message) {
        if (this.channels.length === 0)
            return true;
        return this.channels.every(channel => {
            return message.channel instanceof discord_js_1.TextChannel ? (channel instanceof discord_js_1.TextChannel ? channel.id === message.channel?.id : channel === message.channel.id) : false;
        });
    }
}
exports.Command = Command;
